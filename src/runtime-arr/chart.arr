import global as G
import chart-lib as CL
import list as L

################################################################################
# CONSTANTS
################################################################################


################################################################################
# TYPE SYNONYMS
################################################################################

type Posn = RawArray<Number>

################################################################################
# HELPERS
################################################################################

posn = {(x :: Number, y :: Number): [G.raw-array: x, y]}

################################################################################
# METHODS
################################################################################


################################################################################
# BOUNDING BOX
################################################################################

type BoundingBox = {
  x-min :: Number,
  x-max :: Number,
  y-min :: Number,
  y-max :: Number,
  is-valid :: Boolean
}

default-bounding-box :: BoundingBox = {
  x-min: 0,
  x-max: 0,
  y-min: 0,
  y-max: 0,
  is-valid: false,
}

fun compute-min(ps :: RawArray<Number>) -> Number:
  G.raw-array-fold(G.num-min, 0, ps)
end

fun compute-max(ps :: RawArray<Number>) -> Number:
  G.raw-array-fold(G.num-max, 0, ps)
end

fun get-bounding-box(ps :: L.List<Posn>) -> BoundingBox:
  if L.length(ps) == 0:
    default-bounding-box.{is-valid: false}
  else:
    x-arr = G.raw-array-get(ps, 0)
    y-arr = G.raw-array-get(ps, 1)
    default-bounding-box.{
      x-min: compute-min(x-arr),
      x-max: compute-max(x-arr),
      y-min: compute-min(y-arr),
      y-max: compute-max(y-arr),
      is-valid: true,
    }
  end
end

################################################################################
# DEFAULT VALUES
################################################################################


################################################################################
# DATA DEFINITIONS
################################################################################


################################################################################
# FUNCTIONS
################################################################################


################################################################################
# PLOTS
################################################################################

