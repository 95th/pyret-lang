# THIS FILE IS AUTOMATICALLY GENERATED FROM autogenerate.arr. PLEASE DO NOT EDIT.
provide *

include ast
include string-dict
include file("ds-structs.arr")
import global as _
import base as _
fun g-str(s): g-prim(e-str(s)) end
fun g-num(s): g-prim(e-num(s)) end
fun g-bool(s): g-prim(e-bool(s)) end
fun g-loc(s): g-prim(e-loc(s)) end
shadow ast-to-term-visitor =
  {
    method option(self, opt):
      cases(Option) opt: | none => none | some( v) => some(v.visit(self)) end
    end,
    method list(self, lst):
      cases(List) lst:
        | empty => empty
        | link( f,  r) => link(f.visit(self), self.list(r))
      end
    end,
    method s-underscore(self, l): g-surf("s-underscore", [list: g-loc(l)]) end,
    method s-name(self, l, s): g-var(v-name(l, s)) end,
    method s-global(self, s):
      g-surf("s-global", [list: g-loc(dummy-loc), g-str(s)])
    end,
    method s-type-global(self, s):
      g-surf("s-type-global", [list: g-loc(dummy-loc), g-str(s)])
    end,
    method s-atom(self, base, serial):
      g-surf("s-atom", [list: g-loc(dummy-loc), g-str(base), g-num(serial)])
    end,
    method app-info-c(self, is-recursive, is-tail):
      g-surf("app-info-c",
        [list: g-loc(dummy-loc), g-bool(is-recursive), g-bool(is-tail)])
    end,
    method s-program(self, l, _provide, provided-types, imports, block):
      g-surf("s-program",
        [list: 
          g-loc(l),
          _provide.visit(self),
          provided-types.visit(self),
          g-list(self.list(imports)),
          block.visit(self)
        ])
    end,
    method s-include(self, l, mod):
      g-surf("s-include", [list: g-loc(l), mod.visit(self)])
    end,
    method s-import(self, l, file, name):
      g-surf("s-import", [list: g-loc(l), file.visit(self), name.visit(self)])
    end,
    method s-import-fields(self, l, fields, file):
      g-surf("s-import-fields",
        [list: g-loc(l), g-list(self.list(fields)), file.visit(self)])
    end,
    method s-import-complete(
        self,
        l,
        values,
        types,
        import-type,
        vals-name,
        types-name
      ):
      g-surf("s-import-complete",
        [list: 
          g-loc(l),
          g-list(self.list(values)),
          g-list(self.list(types)),
          import-type.visit(self),
          vals-name.visit(self),
          types-name.visit(self)
        ])
    end,
    method p-value(self, l, v, ann):
      g-surf("p-value", [list: g-loc(l), v.visit(self), ann.visit(self)])
    end,
    method p-alias(self, l, in-name, out-name, mod):
      g-surf("p-alias",
        [list: 
          g-loc(l),
          in-name.visit(self),
          out-name.visit(self),
          g-option(self.option(mod))
        ])
    end,
    method p-data(self, l, d, mod):
      g-surf("p-data",
        [list: g-loc(l), d.visit(self), g-option(self.option(mod))])
    end,
    method s-provide(self, l, block):
      g-surf("s-provide", [list: g-loc(l), block.visit(self)])
    end,
    method s-provide-complete(self, l, values, aliases, data-definitions):
      g-surf("s-provide-complete",
        [list: 
          g-loc(l),
          g-list(self.list(values)),
          g-list(self.list(aliases)),
          g-list(self.list(data-definitions))
        ])
    end,
    method s-provide-all(self, l): g-surf("s-provide-all", [list: g-loc(l)]) end,
    method s-provide-none(self, l):
      g-surf("s-provide-none", [list: g-loc(l)])
    end,
    method s-provide-types(self, l, ann):
      g-surf("s-provide-types", [list: g-loc(l), g-list(self.list(ann))])
    end,
    method s-provide-types-all(self, l):
      g-surf("s-provide-types-all", [list: g-loc(l)])
    end,
    method s-provide-types-none(self, l):
      g-surf("s-provide-types-none", [list: g-loc(l)])
    end,
    method s-const-import(self, l, mod):
      g-surf("s-const-import", [list: g-loc(l), g-str(mod)])
    end,
    method s-special-import(self, l, kind, args):
      g-surf("s-special-import",
        [list: g-loc(l), g-str(kind), g-list(args.map(g-str))])
    end,
    method h-use-loc(self, l): g-surf("h-use-loc", [list: g-loc(l)]) end,
    method s-let-bind(self, l, b, value):
      g-surf("s-let-bind", [list: g-loc(l), b.visit(self), value.visit(self)])
    end,
    method s-var-bind(self, l, b, value):
      g-surf("s-var-bind", [list: g-loc(l), b.visit(self), value.visit(self)])
    end,
    method s-letrec-bind(self, l, b, value):
      g-surf("s-letrec-bind",
        [list: g-loc(l), b.visit(self), value.visit(self)])
    end,
    method s-type-bind(self, l, name, params, ann):
      g-surf("s-type-bind",
        [list: 
          g-loc(l),
          name.visit(self),
          g-list(self.list(params)),
          ann.visit(self)
        ])
    end,
    method s-newtype-bind(self, l, name, namet):
      g-surf("s-newtype-bind",
        [list: g-loc(l), name.visit(self), namet.visit(self)])
    end,
    method s-defined-value(self, name, value):
      g-surf("s-defined-value",
        [list: g-loc(dummy-loc), g-str(name), value.visit(self)])
    end,
    method s-defined-var(self, name, id):
      g-surf("s-defined-var",
        [list: g-loc(dummy-loc), g-str(name), id.visit(self)])
    end,
    method s-defined-type(self, name, typ):
      g-surf("s-defined-type",
        [list: g-loc(dummy-loc), g-str(name), typ.visit(self)])
    end,
    method s-module(
        self,
        l,
        answer,
        defined-values,
        defined-types,
        provided-values,
        provided-types,
        checks
      ):
      g-surf("s-module",
        [list: 
          g-loc(l),
          answer.visit(self),
          g-list(self.list(defined-values)),
          g-list(self.list(defined-types)),
          provided-values.visit(self),
          g-list(self.list(provided-types)),
          checks.visit(self)
        ])
    end,
    method s-template(self, l): g-surf("s-template", [list: g-loc(l)]) end,
    method s-type-let-expr(self, l, binds, body, blocky):
      g-surf("s-type-let-expr",
        [list: 
          g-loc(l),
          g-list(self.list(binds)),
          body.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-let-expr(self, l, binds, body, blocky):
      g-surf("s-let-expr",
        [list: 
          g-loc(l),
          g-list(self.list(binds)),
          body.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-letrec(self, l, binds, body, blocky):
      g-surf("s-letrec",
        [list: 
          g-loc(l),
          g-list(self.list(binds)),
          body.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-hint-exp(self, l, hints, exp):
      g-surf("s-hint-exp",
        [list: g-loc(l), g-list(self.list(hints)), exp.visit(self)])
    end,
    method s-instantiate(self, l, expr, params):
      g-surf("s-instantiate",
        [list: g-loc(l), expr.visit(self), g-list(self.list(params))])
    end,
    method s-block(self, l, stmts):
      g-surf("s-block", [list: g-loc(l), g-list(self.list(stmts))])
    end,
    method s-user-block(self, l, body):
      g-surf("s-user-block", [list: g-loc(l), body.visit(self)])
    end,
    method s-fun(
        self,
        l,
        name,
        params,
        args,
        ann,
        doc,
        body,
        _check-loc,
        _check,
        blocky
      ):
      g-surf("s-fun",
        [list: 
          g-loc(l),
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-type(self, l, name, params, ann):
      g-surf("s-type",
        [list: 
          g-loc(l),
          name.visit(self),
          g-list(self.list(params)),
          ann.visit(self)
        ])
    end,
    method s-newtype(self, l, name, namet):
      g-surf("s-newtype", [list: g-loc(l), name.visit(self), namet.visit(self)])
    end,
    method s-var(self, l, name, value):
      g-surf("s-var", [list: g-loc(l), name.visit(self), value.visit(self)])
    end,
    method s-rec(self, l, name, value):
      g-surf("s-rec", [list: g-loc(l), name.visit(self), value.visit(self)])
    end,
    method s-let(self, l, name, value, keyword-val):
      g-surf("s-let",
        [list: 
          g-loc(l),
          name.visit(self),
          value.visit(self),
          g-bool(keyword-val)
        ])
    end,
    method s-contract(self, l, name, ann):
      g-surf("s-contract", [list: g-loc(l), name.visit(self), ann.visit(self)])
    end,
    method s-when(self, l, test, block, blocky):
      g-surf("s-when",
        [list: g-loc(l), test.visit(self), block.visit(self), g-bool(blocky)])
    end,
    method s-assign(self, l, id, value):
      g-surf("s-assign", [list: g-loc(l), id.visit(self), value.visit(self)])
    end,
    method s-if-pipe(self, l, branches, blocky):
      g-surf("s-if-pipe",
        [list: g-loc(l), g-list(self.list(branches)), g-bool(blocky)])
    end,
    method s-if-pipe-else(self, l, branches, _else, blocky):
      g-surf("s-if-pipe-else",
        [list: 
          g-loc(l),
          g-list(self.list(branches)),
          _else.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-if(self, l, branches, blocky):
      g-surf("s-if",
        [list: g-loc(l), g-list(self.list(branches)), g-bool(blocky)])
    end,
    method s-if-else(self, l, branches, _else, blocky):
      g-surf("s-if-else",
        [list: 
          g-loc(l),
          g-list(self.list(branches)),
          _else.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-cases(self, l, typ, val, branches, blocky):
      g-surf("s-cases",
        [list: 
          g-loc(l),
          typ.visit(self),
          val.visit(self),
          g-list(self.list(branches)),
          g-bool(blocky)
        ])
    end,
    method s-cases-else(self, l, typ, val, branches, _else, blocky):
      g-surf("s-cases-else",
        [list: 
          g-loc(l),
          typ.visit(self),
          val.visit(self),
          g-list(self.list(branches)),
          _else.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-op(self, l, op-l, op, left, right):
      g-surf("s-op",
        [list: 
          g-loc(l),
          g-loc(op-l),
          g-str(op),
          left.visit(self),
          right.visit(self)
        ])
    end,
    method s-check-test(self, l, op, refinement, left, right):
      g-surf("s-check-test",
        [list: 
          g-loc(l),
          op.visit(self),
          g-option(self.option(refinement)),
          left.visit(self),
          g-option(self.option(right))
        ])
    end,
    method s-check-expr(self, l, expr, ann):
      g-surf("s-check-expr",
        [list: g-loc(l), expr.visit(self), ann.visit(self)])
    end,
    method s-paren(self, l, expr):
      g-surf("s-paren", [list: g-loc(l), expr.visit(self)])
    end,
    method s-lam(
        self,
        l,
        name,
        params,
        args,
        ann,
        doc,
        body,
        _check-loc,
        _check,
        blocky
      ):
      g-surf("s-lam",
        [list: 
          g-loc(l),
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-method(
        self,
        l,
        name,
        params,
        args,
        ann,
        doc,
        body,
        _check-loc,
        _check,
        blocky
      ):
      g-surf("s-method",
        [list: 
          g-loc(l),
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-extend(self, l, supe, fields):
      g-surf("s-extend",
        [list: g-loc(l), supe.visit(self), g-list(self.list(fields))])
    end,
    method s-update(self, l, supe, fields):
      g-surf("s-update",
        [list: g-loc(l), supe.visit(self), g-list(self.list(fields))])
    end,
    method s-tuple(self, l, fields):
      g-surf("s-tuple", [list: g-loc(l), g-list(self.list(fields))])
    end,
    method s-tuple-get(self, l, tup, index, index-loc):
      g-surf("s-tuple-get",
        [list: g-loc(l), tup.visit(self), g-num(index), g-loc(index-loc)])
    end,
    method s-obj(self, l, fields):
      g-surf("s-obj", [list: g-loc(l), g-list(self.list(fields))])
    end,
    method s-array(self, l, values):
      g-surf("s-array", [list: g-loc(l), g-list(self.list(values))])
    end,
    method s-construct(self, l, modifier, constructor, values):
      g-surf("s-construct",
        [list: 
          g-loc(l),
          modifier.visit(self),
          constructor.visit(self),
          g-list(self.list(values))
        ])
    end,
    method s-app(self, l, _fun, args):
      cases(Expr) _fun:
        | s-dot( l-dot,  obj,  field) =>
          g-surf("s-method-app",
            [list: 
              g-loc(l),
              g-loc(l-dot),
              obj.visit(self),
              g-str(field),
              g-list(self.list(args))
            ])
        | else =>
        g-surf("s-app",
          [list: g-loc(l), _fun.visit(self), g-list(self.list(args))])
      end
    end,
    method s-app-enriched(self, l, _fun, args, app-info):
      g-surf("s-app-enriched",
        [list: 
          g-loc(l),
          _fun.visit(self),
          g-list(self.list(args)),
          app-info.visit(self)
        ])
    end,
    method s-prim-app(self, l, _fun, args):
      g-surf("s-prim-app",
        [list: g-loc(l), g-str(_fun), g-list(self.list(args))])
    end,
    method s-prim-val(self, l, name):
      g-surf("s-prim-val", [list: g-loc(l), g-str(name)])
    end,
    method s-id(self, l, id):
      g-surf("s-id", [list: g-loc(l), id.visit(self)])
    end,
    method s-id-var(self, l, id):
      g-surf("s-id-var", [list: g-loc(l), id.visit(self)])
    end,
    method s-id-letrec(self, l, id, safe):
      g-surf("s-id-letrec", [list: g-loc(l), id.visit(self), g-bool(safe)])
    end,
    method s-undefined(self, l): g-surf("s-undefined", [list: g-loc(l)]) end,
    method s-srcloc(self, l, loc):
      g-surf("s-srcloc", [list: g-loc(l), g-loc(loc)])
    end,
    method s-num(self, l, n): g-surf("s-num", [list: g-loc(l), g-num(n)]) end,
    method s-frac(self, l, num, den):
      g-surf("s-frac", [list: g-loc(l), g-num(num), g-num(den)])
    end,
    method s-rfrac(self, l, num, den):
      g-surf("s-rfrac", [list: g-loc(l), g-num(num), g-num(den)])
    end,
    method s-bool(self, l, b): g-surf("s-bool", [list: g-loc(l), g-bool(b)]) end,
    method s-str(self, l, s): g-surf("s-str", [list: g-loc(l), g-str(s)]) end,
    method s-dot(self, l, obj, field):
      g-surf("s-dot", [list: g-loc(l), obj.visit(self), g-str(field)])
    end,
    method s-get-bang(self, l, obj, field):
      g-surf("s-get-bang", [list: g-loc(l), obj.visit(self), g-str(field)])
    end,
    method s-bracket(self, l, obj, key):
      g-surf("s-bracket", [list: g-loc(l), obj.visit(self), key.visit(self)])
    end,
    method s-data(
        self,
        l,
        name,
        params,
        mixins,
        variants,
        shared-members,
        _check-loc,
        _check
      ):
      g-surf("s-data",
        [list: 
          g-loc(l),
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(mixins)),
          g-list(self.list(variants)),
          g-list(self.list(shared-members)),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check))
        ])
    end,
    method s-data-expr(
        self,
        l,
        name,
        namet,
        params,
        mixins,
        variants,
        shared-members,
        _check-loc,
        _check
      ):
      g-surf("s-data-expr",
        [list: 
          g-loc(l),
          g-str(name),
          namet.visit(self),
          g-list(self.list(params)),
          g-list(self.list(mixins)),
          g-list(self.list(variants)),
          g-list(self.list(shared-members)),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check))
        ])
    end,
    method s-for(self, l, iterator, bindings, ann, body, blocky):
      g-surf("s-for",
        [list: 
          g-loc(l),
          iterator.visit(self),
          g-list(self.list(bindings)),
          ann.visit(self),
          body.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-check(self, l, name, body, keyword-check):
      g-surf("s-check",
        [list: 
          g-loc(l),
          g-option(name.and-then(g-str)),
          body.visit(self),
          g-bool(keyword-check)
        ])
    end,
    method s-reactor(self, l, fields):
      g-surf("s-reactor", [list: g-loc(l), g-list(self.list(fields))])
    end,
    method s-table-extend(self, l, column-binds, extensions):
      g-surf("s-table-extend",
        [list: 
          g-loc(l),
          column-binds.visit(self),
          g-list(self.list(extensions))
        ])
    end,
    method s-table-update(self, l, column-binds, updates):
      g-surf("s-table-update",
        [list: g-loc(l), column-binds.visit(self), g-list(self.list(updates))])
    end,
    method s-table-select(self, l, columns, table):
      g-surf("s-table-select",
        [list: g-loc(l), g-list(self.list(columns)), table.visit(self)])
    end,
    method s-table-order(self, l, table, ordering):
      g-surf("s-table-order",
        [list: g-loc(l), table.visit(self), g-list(self.list(ordering))])
    end,
    method s-table-filter(self, l, column-binds, predicate):
      g-surf("s-table-filter",
        [list: g-loc(l), column-binds.visit(self), predicate.visit(self)])
    end,
    method s-table-extract(self, l, column, table):
      g-surf("s-table-extract",
        [list: g-loc(l), column.visit(self), table.visit(self)])
    end,
    method s-table(self, l, headers, rows):
      g-surf("s-table",
        [list: g-loc(l), g-list(self.list(headers)), g-list(self.list(rows))])
    end,
    method s-load-table(self, l, headers, spec):
      g-surf("s-load-table",
        [list: g-loc(l), g-list(self.list(headers)), g-list(self.list(spec))])
    end,
    method s-spy-block(self, l, message, contents):
      g-surf("s-spy-block",
        [list: 
          g-loc(l),
          g-option(self.option(message)),
          g-list(self.list(contents))
        ])
    end,
    method s-table-row(self, l, elems):
      g-surf("s-table-row", [list: g-loc(l), g-list(self.list(elems))])
    end,
    method s-spy-name(self, l, name):
      g-surf("s-spy-name", [list: g-loc(l), name.visit(self)])
    end,
    method s-spy-expr(self, l, name, value):
      g-surf("s-spy-expr", [list: g-loc(l), g-str(name), value.visit(self)])
    end,
    method s-construct-normal(self):
      g-surf("s-construct-normal", [list: g-loc(dummy-loc)])
    end,
    method s-construct-lazy(self):
      g-surf("s-construct-lazy", [list: g-loc(dummy-loc)])
    end,
    method s-bind(self, l, shadows, id, ann):
      g-surf("s-bind",
        [list: g-loc(l), g-bool(shadows), id.visit(self), ann.visit(self)])
    end,
    method s-tuple-bind(self, l, fields, as-name):
      g-surf("s-tuple-bind",
        [list: 
          g-loc(l),
          g-list(self.list(fields)),
          g-option(self.option(as-name))
        ])
    end,
    method s-data-field(self, l, name, value):
      g-surf("s-data-field", [list: g-loc(l), g-str(name), value.visit(self)])
    end,
    method s-mutable-field(self, l, name, ann, value):
      g-surf("s-mutable-field",
        [list: g-loc(l), g-str(name), ann.visit(self), value.visit(self)])
    end,
    method s-method-field(
        self,
        l,
        name,
        params,
        args,
        ann,
        doc,
        body,
        _check-loc,
        _check,
        blocky
      ):
      g-surf("s-method-field",
        [list: 
          g-loc(l),
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-reactor-field(self, l, name, value):
      g-surf("s-reactor-field",
        [list: g-loc(l), g-str(name), value.visit(self)])
    end,
    method s-field-name(self, l, name, ann):
      g-surf("s-field-name", [list: g-loc(l), g-str(name), ann.visit(self)])
    end,
    method s-for-bind(self, l, bind, value):
      g-surf("s-for-bind",
        [list: g-loc(l), bind.visit(self), value.visit(self)])
    end,
    method s-column-binds(self, l, binds, table):
      g-surf("s-column-binds",
        [list: g-loc(l), g-list(self.list(binds)), table.visit(self)])
    end,
    method ASCENDING(self): g-surf("ASCENDING", [list: g-loc(dummy-loc)]) end,
    method DESCENDING(self): g-surf("DESCENDING", [list: g-loc(dummy-loc)]) end,
    method s-column-sort(self, l, column, direction):
      g-surf("s-column-sort",
        [list: g-loc(l), column.visit(self), direction.visit(self)])
    end,
    method s-table-extend-field(self, l, name, value, ann):
      g-surf("s-table-extend-field",
        [list: g-loc(l), g-str(name), value.visit(self), ann.visit(self)])
    end,
    method s-table-extend-reducer(self, l, name, reducer, col, ann):
      g-surf("s-table-extend-reducer",
        [list: 
          g-loc(l),
          g-str(name),
          reducer.visit(self),
          col.visit(self),
          ann.visit(self)
        ])
    end,
    method s-sanitize(self, l, name, sanitizer):
      g-surf("s-sanitize",
        [list: g-loc(l), name.visit(self), sanitizer.visit(self)])
    end,
    method s-table-src(self, l, src):
      g-surf("s-table-src", [list: g-loc(l), src.visit(self)])
    end,
    method s-normal(self): g-surf("s-normal", [list: g-loc(dummy-loc)]) end,
    method s-mutable(self): g-surf("s-mutable", [list: g-loc(dummy-loc)]) end,
    method s-variant-member(self, l, member-type, bind):
      g-surf("s-variant-member",
        [list: g-loc(l), member-type.visit(self), bind.visit(self)])
    end,
    method s-variant(self, l, constr-loc, name, members, with-members):
      g-surf("s-variant",
        [list: 
          g-loc(l),
          g-loc(constr-loc),
          g-str(name),
          g-list(self.list(members)),
          g-list(self.list(with-members))
        ])
    end,
    method s-singleton-variant(self, l, name, with-members):
      g-surf("s-singleton-variant",
        [list: g-loc(l), g-str(name), g-list(self.list(with-members))])
    end,
    method s-if-branch(self, l, test, body):
      g-surf("s-if-branch",
        [list: g-loc(l), test.visit(self), body.visit(self)])
    end,
    method s-if-pipe-branch(self, l, test, body):
      g-surf("s-if-pipe-branch",
        [list: g-loc(l), test.visit(self), body.visit(self)])
    end,
    method s-cases-bind-ref(self):
      g-surf("s-cases-bind-ref", [list: g-loc(dummy-loc)])
    end,
    method s-cases-bind-normal(self):
      g-surf("s-cases-bind-normal", [list: g-loc(dummy-loc)])
    end,
    method s-cases-bind(self, l, field-type, bind):
      g-surf("s-cases-bind",
        [list: g-loc(l), field-type.visit(self), bind.visit(self)])
    end,
    method s-cases-branch(self, l, pat-loc, name, args, body):
      g-surf("s-cases-branch",
        [list: 
          g-loc(l),
          g-loc(pat-loc),
          g-str(name),
          g-list(self.list(args)),
          body.visit(self)
        ])
    end,
    method s-singleton-cases-branch(self, l, pat-loc, name, body):
      g-surf("s-singleton-cases-branch",
        [list: g-loc(l), g-loc(pat-loc), g-str(name), body.visit(self)])
    end,
    method s-op-is(self, l): g-surf("s-op-is", [list: g-loc(l)]) end,
    method s-op-is-roughly(self, l):
      g-surf("s-op-is-roughly", [list: g-loc(l)])
    end,
    method s-op-is-op(self, l, op):
      g-surf("s-op-is-op", [list: g-loc(l), g-str(op)])
    end,
    method s-op-is-not(self, l): g-surf("s-op-is-not", [list: g-loc(l)]) end,
    method s-op-is-not-op(self, l, op):
      g-surf("s-op-is-not-op", [list: g-loc(l), g-str(op)])
    end,
    method s-op-satisfies(self, l):
      g-surf("s-op-satisfies", [list: g-loc(l)])
    end,
    method s-op-satisfies-not(self, l):
      g-surf("s-op-satisfies-not", [list: g-loc(l)])
    end,
    method s-op-raises(self, l): g-surf("s-op-raises", [list: g-loc(l)]) end,
    method s-op-raises-other(self, l):
      g-surf("s-op-raises-other", [list: g-loc(l)])
    end,
    method s-op-raises-not(self, l):
      g-surf("s-op-raises-not", [list: g-loc(l)])
    end,
    method s-op-raises-satisfies(self, l):
      g-surf("s-op-raises-satisfies", [list: g-loc(l)])
    end,
    method s-op-raises-violates(self, l):
      g-surf("s-op-raises-violates", [list: g-loc(l)])
    end,
    method a-blank(self): g-surf("a-blank", [list: g-loc(dummy-loc)]) end,
    method a-any(self, l): g-surf("a-any", [list: g-loc(l)]) end,
    method a-name(self, l, id):
      g-surf("a-name", [list: g-loc(l), id.visit(self)])
    end,
    method a-type-var(self, l, id):
      g-surf("a-type-var", [list: g-loc(l), id.visit(self)])
    end,
    method a-arrow(self, l, args, ret, use-parens):
      g-surf("a-arrow",
        [list: 
          g-loc(l),
          g-list(self.list(args)),
          ret.visit(self),
          g-bool(use-parens)
        ])
    end,
    method a-arrow-argnames(self, l, args, ret, use-parens):
      g-surf("a-arrow-argnames",
        [list: 
          g-loc(l),
          g-list(self.list(args)),
          ret.visit(self),
          g-bool(use-parens)
        ])
    end,
    method a-record(self, l, fields):
      g-surf("a-record", [list: g-loc(l), g-list(self.list(fields))])
    end,
    method a-tuple(self, l, fields):
      g-surf("a-tuple", [list: g-loc(l), g-list(self.list(fields))])
    end,
    method a-app(self, l, ann, args):
      g-surf("a-app",
        [list: g-loc(l), ann.visit(self), g-list(self.list(args))])
    end,
    method a-pred(self, l, ann, exp):
      g-surf("a-pred", [list: g-loc(l), ann.visit(self), exp.visit(self)])
    end,
    method a-dot(self, l, obj, field):
      g-surf("a-dot", [list: g-loc(l), obj.visit(self), g-str(field)])
    end,
    method a-checked(self, checked, residual):
      g-surf("a-checked",
        [list: g-loc(dummy-loc), checked.visit(self), residual.visit(self)])
    end,
    method a-field(self, l, name, ann):
      g-surf("a-field", [list: g-loc(l), g-str(name), ann.visit(self)])
    end
  }
rec lookup-dict =
  [string-dict: 
    "s-underscore",
    lam(args): s-underscore(term-to-ast(args.get(0))) end,
    "s-name",
    lam(args): s-name(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-global",
    lam(args): s-global(term-to-ast(args.get(1))) end,
    "s-type-global",
    lam(args): s-type-global(term-to-ast(args.get(1))) end,
    "s-atom",
    lam(args): s-atom(term-to-ast(args.get(1)), term-to-ast(args.get(2))) end,
    "app-info-c",
    lam(args):
      app-info-c(term-to-ast(args.get(1)), term-to-ast(args.get(2)))
    end,
    "s-program",
    lam(args):
      s-program(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-include",
    lam(args): s-include(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-import",
    lam(args):
      s-import(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-import-fields",
    lam(args):
      s-import-fields(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-import-complete",
    lam(args):
      s-import-complete(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)))
    end,
    "p-value",
    lam(args):
      p-value(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "p-alias",
    lam(args):
      p-alias(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "p-data",
    lam(args):
      p-data(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-provide",
    lam(args): s-provide(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-provide-complete",
    lam(args):
      s-provide-complete(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-provide-all",
    lam(args): s-provide-all(term-to-ast(args.get(0))) end,
    "s-provide-none",
    lam(args): s-provide-none(term-to-ast(args.get(0))) end,
    "s-provide-types",
    lam(args):
      s-provide-types(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-provide-types-all",
    lam(args): s-provide-types-all(term-to-ast(args.get(0))) end,
    "s-provide-types-none",
    lam(args): s-provide-types-none(term-to-ast(args.get(0))) end,
    "s-const-import",
    lam(args):
      s-const-import(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-special-import",
    lam(args):
      s-special-import(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "h-use-loc",
    lam(args): h-use-loc(term-to-ast(args.get(0))) end,
    "s-let-bind",
    lam(args):
      s-let-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-var-bind",
    lam(args):
      s-var-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-letrec-bind",
    lam(args):
      s-letrec-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-type-bind",
    lam(args):
      s-type-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-newtype-bind",
    lam(args):
      s-newtype-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-defined-value",
    lam(args):
      s-defined-value(term-to-ast(args.get(1)), term-to-ast(args.get(2)))
    end,
    "s-defined-var",
    lam(args):
      s-defined-var(term-to-ast(args.get(1)), term-to-ast(args.get(2)))
    end,
    "s-defined-type",
    lam(args):
      s-defined-type(term-to-ast(args.get(1)), term-to-ast(args.get(2)))
    end,
    "s-module",
    lam(args):
      s-module(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)))
    end,
    "s-template",
    lam(args): s-template(term-to-ast(args.get(0))) end,
    "s-type-let-expr",
    lam(args):
      s-type-let-expr(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-let-expr",
    lam(args):
      s-let-expr(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-letrec",
    lam(args):
      s-letrec(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-hint-exp",
    lam(args):
      s-hint-exp(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-instantiate",
    lam(args):
      s-instantiate(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-block",
    lam(args): s-block(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-user-block",
    lam(args):
      s-user-block(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-fun",
    lam(args):
      s-fun(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)),
        term-to-ast(args.get(7)),
        term-to-ast(args.get(8)),
        term-to-ast(args.get(9)))
    end,
    "s-type",
    lam(args):
      s-type(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-newtype",
    lam(args):
      s-newtype(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-var",
    lam(args):
      s-var(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-rec",
    lam(args):
      s-rec(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-let",
    lam(args):
      s-let(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-contract",
    lam(args):
      s-contract(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-when",
    lam(args):
      s-when(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-assign",
    lam(args):
      s-assign(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-if-pipe",
    lam(args):
      s-if-pipe(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-if-pipe-else",
    lam(args):
      s-if-pipe-else(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-if",
    lam(args):
      s-if(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-if-else",
    lam(args):
      s-if-else(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-cases",
    lam(args):
      s-cases(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-cases-else",
    lam(args):
      s-cases-else(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)))
    end,
    "s-op",
    lam(args):
      s-op(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-check-test",
    lam(args):
      s-check-test(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-check-expr",
    lam(args):
      s-check-expr(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-paren",
    lam(args): s-paren(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-lam",
    lam(args):
      s-lam(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)),
        term-to-ast(args.get(7)),
        term-to-ast(args.get(8)),
        term-to-ast(args.get(9)))
    end,
    "s-method",
    lam(args):
      s-method(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)),
        term-to-ast(args.get(7)),
        term-to-ast(args.get(8)),
        term-to-ast(args.get(9)))
    end,
    "s-extend",
    lam(args):
      s-extend(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-update",
    lam(args):
      s-update(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-tuple",
    lam(args): s-tuple(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-tuple-get",
    lam(args):
      s-tuple-get(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-obj",
    lam(args): s-obj(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-array",
    lam(args): s-array(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-construct",
    lam(args):
      s-construct(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-app",
    lam(args):
      s-app(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-app-enriched",
    lam(args):
      s-app-enriched(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-prim-app",
    lam(args):
      s-prim-app(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-prim-val",
    lam(args):
      s-prim-val(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-id",
    lam(args): s-id(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-id-var",
    lam(args): s-id-var(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-id-letrec",
    lam(args):
      s-id-letrec(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-undefined",
    lam(args): s-undefined(term-to-ast(args.get(0))) end,
    "s-srcloc",
    lam(args): s-srcloc(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-num",
    lam(args): s-num(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-frac",
    lam(args):
      s-frac(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-rfrac",
    lam(args):
      s-rfrac(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-bool",
    lam(args): s-bool(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-str",
    lam(args): s-str(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-dot",
    lam(args):
      s-dot(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-get-bang",
    lam(args):
      s-get-bang(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-bracket",
    lam(args):
      s-bracket(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-data",
    lam(args):
      s-data(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)),
        term-to-ast(args.get(7)))
    end,
    "s-data-expr",
    lam(args):
      s-data-expr(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)),
        term-to-ast(args.get(7)),
        term-to-ast(args.get(8)))
    end,
    "s-for",
    lam(args):
      s-for(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)))
    end,
    "s-check",
    lam(args):
      s-check(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-reactor",
    lam(args): s-reactor(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "s-table-extend",
    lam(args):
      s-table-extend(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-update",
    lam(args):
      s-table-update(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-select",
    lam(args):
      s-table-select(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-order",
    lam(args):
      s-table-order(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-filter",
    lam(args):
      s-table-filter(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-extract",
    lam(args):
      s-table-extract(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table",
    lam(args):
      s-table(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-load-table",
    lam(args):
      s-load-table(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-spy-block",
    lam(args):
      s-spy-block(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-row",
    lam(args):
      s-table-row(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-spy-name",
    lam(args):
      s-spy-name(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-spy-expr",
    lam(args):
      s-spy-expr(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-construct-normal",
    lam(args): s-construct-normal end,
    "s-construct-lazy",
    lam(args): s-construct-lazy end,
    "s-bind",
    lam(args):
      s-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-tuple-bind",
    lam(args):
      s-tuple-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-data-field",
    lam(args):
      s-data-field(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-mutable-field",
    lam(args):
      s-mutable-field(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-method-field",
    lam(args):
      s-method-field(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)),
        term-to-ast(args.get(5)),
        term-to-ast(args.get(6)),
        term-to-ast(args.get(7)),
        term-to-ast(args.get(8)),
        term-to-ast(args.get(9)))
    end,
    "s-reactor-field",
    lam(args):
      s-reactor-field(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-field-name",
    lam(args):
      s-field-name(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-for-bind",
    lam(args):
      s-for-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-column-binds",
    lam(args):
      s-column-binds(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "ASCENDING",
    lam(args): ASCENDING end,
    "DESCENDING",
    lam(args): DESCENDING end,
    "s-column-sort",
    lam(args):
      s-column-sort(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-extend-field",
    lam(args):
      s-table-extend-field(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-table-extend-reducer",
    lam(args):
      s-table-extend-reducer(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-sanitize",
    lam(args):
      s-sanitize(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-table-src",
    lam(args):
      s-table-src(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-normal",
    lam(args): s-normal end,
    "s-mutable",
    lam(args): s-mutable end,
    "s-variant-member",
    lam(args):
      s-variant-member(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-variant",
    lam(args):
      s-variant(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-singleton-variant",
    lam(args):
      s-singleton-variant(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-if-branch",
    lam(args):
      s-if-branch(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-if-pipe-branch",
    lam(args):
      s-if-pipe-branch(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-cases-bind-ref",
    lam(args): s-cases-bind-ref end,
    "s-cases-bind-normal",
    lam(args): s-cases-bind-normal end,
    "s-cases-bind",
    lam(args):
      s-cases-bind(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "s-cases-branch",
    lam(args):
      s-cases-branch(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)),
        term-to-ast(args.get(4)))
    end,
    "s-singleton-cases-branch",
    lam(args):
      s-singleton-cases-branch(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "s-op-is",
    lam(args): s-op-is(term-to-ast(args.get(0))) end,
    "s-op-is-roughly",
    lam(args): s-op-is-roughly(term-to-ast(args.get(0))) end,
    "s-op-is-op",
    lam(args):
      s-op-is-op(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-op-is-not",
    lam(args): s-op-is-not(term-to-ast(args.get(0))) end,
    "s-op-is-not-op",
    lam(args):
      s-op-is-not-op(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "s-op-satisfies",
    lam(args): s-op-satisfies(term-to-ast(args.get(0))) end,
    "s-op-satisfies-not",
    lam(args): s-op-satisfies-not(term-to-ast(args.get(0))) end,
    "s-op-raises",
    lam(args): s-op-raises(term-to-ast(args.get(0))) end,
    "s-op-raises-other",
    lam(args): s-op-raises-other(term-to-ast(args.get(0))) end,
    "s-op-raises-not",
    lam(args): s-op-raises-not(term-to-ast(args.get(0))) end,
    "s-op-raises-satisfies",
    lam(args): s-op-raises-satisfies(term-to-ast(args.get(0))) end,
    "s-op-raises-violates",
    lam(args): s-op-raises-violates(term-to-ast(args.get(0))) end,
    "a-blank",
    lam(args): a-blank end,
    "a-any",
    lam(args): a-any(term-to-ast(args.get(0))) end,
    "a-name",
    lam(args): a-name(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "a-type-var",
    lam(args):
      a-type-var(term-to-ast(args.get(0)), term-to-ast(args.get(1)))
    end,
    "a-arrow",
    lam(args):
      a-arrow(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "a-arrow-argnames",
    lam(args):
      a-arrow-argnames(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)),
        term-to-ast(args.get(3)))
    end,
    "a-record",
    lam(args): a-record(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "a-tuple",
    lam(args): a-tuple(term-to-ast(args.get(0)), term-to-ast(args.get(1))) end,
    "a-app",
    lam(args):
      a-app(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "a-pred",
    lam(args):
      a-pred(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "a-dot",
    lam(args):
      a-dot(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end,
    "a-checked",
    lam(args): a-checked(term-to-ast(args.get(1)), term-to-ast(args.get(2))) end,
    "a-field",
    lam(args):
      a-field(term-to-ast(args.get(0)),
        term-to-ast(args.get(1)),
        term-to-ast(args.get(2)))
    end
  ]
fun term-to-ast(g):
  cases(Term) g:
    | g-surf( op,  args) => lookup-dict.get-value(op)(args)
    | g-core( op,  args) => lookup-dict.get-value(op)(args)
    | g-aux( _,  _) => raise("unexpected g-aux: " + tostring(g))
    | g-prim( val) =>
      cases(GenericPrimitive) val:
        | e-str( s) => s
        | e-num( n) => n
        | e-bool( b) => b
        | e-loc( l) => l
      end
    | g-var( v) =>
      cases (Variable) v:
        | v-atom(name, serial) => s-atom(name, serial)
        | v-name(l, name) => s-name(l, name)
      end
    | g-list( lst) => lst.map(term-to-ast)
    | g-option( opt) => opt.and-then(term-to-ast)
    | g-tag( _,  _,  body) => term-to-ast(body)
  end
end
