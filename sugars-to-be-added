sugar g-id:
  | (g-id x) => (s-id (s-global x))
end

sugar b-id:
  | (b-id x) => (s-dot (g-id "builtins") x)
end

sugar mk-s-bind:
  | (mk-s-bind name) => (s-bind false name (a-blank))
end

sugar mk-s-lam:
  | (mk-s-lam params body) =>
    (s-lam "" [] params (a-blank) "" body none none false)
end

sugar not:
  | (not x) => (s-prim-app "not" [x])
end

sugar boolean?:
  | (boolean? x) => (s-prim-app "isBoolean" [x])
end

################################################################################
# DONE: s-when
################################################################################

sugar s-when:
  | (s-when @l test body blocky) =>
    (fresh [cond]
      (s-let-expr
        [(s-let-bind (mk-s-bind cond) test)]
        (s-if-else [(s-if-branch (not (boolean? (s-id cond)))
                                 (s-prim-app "throwNonBooleanWhen"
                                             [(s-srcloc l)
                                              (s-srcloc (meta get-loc-of test))
                                              (s-id cond)]))
                    (s-if-branch (s-id cond) (s-block [body (g-id "nothing")]))]
                   (g-id "nothing")
                   blocky)
        false))
end

################################################################################
# DONE: s-if, s-if-else, s-if-pipe, s-if-pipe-else
################################################################################

sugar no-branch-exn:
  | (no-branch-exn @l typ) =>
    (s-prim-app "throwNoBranchesMatched" [(s-srcloc l) (s-str typ)])
end

sugar s-if:
  | (s-if branches blocky) => (s-if-else branches (no-branch-exn "if") blocky)
end

sugar s-if-pipe:
  | (s-if-pipe branches blocky) =>
    (s-if-else branches (no-branch-exn "ask") blocky)
end

sugar s-if-pipe-else:
  | (s-if-pipe-else branches else blocky) => (s-if-else branches else blocky)
end

sugar s-if-else:
  | (s-if-else [] else blocky) => else
  | (s-if-else [branch rest_{x} ...x] else blocky) =>
    <s-if-else [branch] (s-if-else [rest_{x} ...x] else blocky) blocky>
end


################################################################################
# DONE: s-construct
################################################################################

sugar s-construct-normal:
  | (s-construct-normal) => {s-construct-normal}
end

sugar s-construct-lazy:
  | (s-construct-lazy) => {s-construct-lazy}
end

sugar s-construct-help:
  | (s-construct-help @l constructor js-name id-name elts) =>
    (s-app @(meta get-loc-of constructor)
           (s-prim-app @(meta get-loc-of constructor)
                       js-name [constructor (s-str id-name) (s-srcloc l)
                                (s-srcloc (meta get-loc-of constructor))])
           elts)
end

sugar s-construct:
  | (s-construct {s-construct-normal} constructor []) =>
    (s-construct-help constructor "getMaker0" "make0" [])
  | (s-construct {s-construct-normal} constructor [e1]) =>
    (s-construct-help constructor "getMaker1" "make1" [e1])
  | (s-construct {s-construct-normal} constructor [e1 e2]) =>
    (s-construct-help constructor "getMaker2" "make2" [e1 e2])
  | (s-construct {s-construct-normal} constructor [e1 e2 e3]) =>
    (s-construct-help constructor "getMaker3" "make3" [e1 e2 e3])
  | (s-construct {s-construct-normal} constructor [e1 e2 e3 e4]) =>
    (s-construct-help constructor "getMaker4" "make4" [e1 e2 e3 e4])
  | (s-construct {s-construct-normal} constructor [e1 e2 e3 e4 e5]) =>
    (s-construct-help constructor "getMaker5" "make5" [e1 e2 e3 e4 e5])
  | (s-construct {s-construct-normal} constructor elts) =>
    (s-construct-help constructor "getMaker" "make" [(s-array elts)])
  | (s-construct {s-construct-lazy} constructor [elt_{x} ...x]) =>
    (s-construct-help constructor "getLazyMaker" "lazy-make"
      [(s-array [(mk-s-lam [] elt_{x}) ...x])])
end

################################################################################
# DONE: s-template, s-user-block, s-paren
################################################################################

sugar s-template:
  | (s-template @l) => (s-prim-app "throwUnfinishedTemplate" [(s-srcloc l)])
end

sugar s-user-block:
  | (s-user-block body) => body
end

sugar s-paren:
  | (s-paren body) => body
end

################################################################################
# DONE: s-import, s-import-fields
################################################################################

sugar s-import:
  | (s-import file name) => (s-import-complete [] [] file name name)
end
sugar s-import-fields:
  | (s-import-fields fields file) =>
    (s-import-complete fields [] file (s-underscore) (s-underscore))
end

################################################################################
# DONE: s-for
################################################################################

sugar s-for-bind:
  | (s-for-bind bind value) => {s-for-bind bind value}
end

sugar s-for:
  | (s-for @l iter [{s-for-bind bind_{i} value_{i}} ...i] ann body blocky) =>
    (s-app
      iter
      [(s-lam
         (meta string-append "<for-body"
                             (meta string-append (meta srcloc-to-string l) ">"))
         [] [bind_{i} ...i] ann "" body none none blocky)
       value_{i} ...i])
end

################################################################################
# DONE: s-bracket
################################################################################

sugar s-bracket:
  | (s-bracket @l obj key) =>
    (s-app (b-id "get-value") [(s-srcloc l) (s-srcloc (meta get-loc-of obj)) obj key])
end

################################################################################
# DONE: s-table
################################################################################

sugar s-field-name:
  | (s-field-name @l name ann) => {s-field-name l name ann}
end

sugar s-table-row:
  | (s-table-row elems) => {s-table-row elems}
end

sugar check-ann:
  | (check-ann expr ann) =>
    (fresh [x] (s-let-expr [(s-let-bind (s-bind false x ann) expr)] (s-id x) true))
end

sugar s-table:
  | (s-table [{s-field-name l_{i} name_{i} ann_{i}} ...i] [{s-table-row [val_{i j} ...i]} ...j]) =>
    (s-prim-app "makeTable"
      [(s-array [(s-str @l_{i} name_{i}) ...i])
       (s-array [(s-array [(check-ann val_{i j} ann_{i}) ...i]) ...j])])
end


################################################################################
# DONE: s-load-table
################################################################################

sugar s-sanitize:
  | (s-sanitize name sanitizer) => {s-sanitize name sanitizer}
end

sugar s-table-src:
  | (s-table-src src) => {s-table-src src}
end

sugar load-table-acc:
  | (load-table-acc [] src sanitizers) => {pair src sanitizers}
  | (load-table-acc [{s-sanitize name sanitizer} rest_{i} ...i] src [sanitizers_{j} ...j]) =>
    (load-table-acc [rest_{i} ...i] src
       [(s-app (b-id "as-loader-option") [(s-str "sanitizer") (s-str (meta name-to-str name)) sanitizer]) sanitizers_{j} ...j])
  | (load-table-acc [{s-table-src src} rest_{i} ...i] none sanitizers) =>
    (load-table-acc [rest_{i} ...i] {some src} sanitizers)
  | (load-table-acc lst {some src} sanitizers) => {WF-ERR-TODO}
end

sugar s-load-table:
  | (s-load-table headers spec) => (load-table-helper headers (load-table-acc spec none []))
end

sugar load-table-helper:
  | (load-table-helper [{s-field-name l_{i} name_{i} ann_{i}} ...i]
                       {pair {some src} sanitizers}) =>
    (s-app (b-id "open-table")
       [(s-app (s-dot src "load") [(s-array [(s-str name_{i}) ...i])
                                   (s-array sanitizers)])])
  | (load-table-helper [header_{i} ...i] {pair none sanitizers}) => {WF-ERR-TODO}
end

################################################################################
# DONE: s-reactor
################################################################################

sugar s-reactor-field:
  | (s-reactor-field @l name value) => {s-reactor-field l name value}
end

sugar s-reactor:
  | (s-reactor [{s-reactor-field l_{i} name_{i} value_{i}} ...i]) =>
    (reactor-acc [{s-reactor-field l_{i} name_{i} value_{i}} ...i] none [])
  # (meta check-dup [name_{i} ...i]) -- this meta produces a wf-error
  # we can use meta because if wf-error happens, then there's no need to resugar
end

sugar reactor-acc:
  | (reactor-acc [] {some init} handlers) => (s-prim-app "makeReactor" [init (s-obj handlers)])
  | (reactor-acc [] none handlers) => {WF-ERR-TODO}

  | (reactor-acc [{s-reactor-field loc "init" init} rest_{i} ...i] none handlers) =>
    (reactor-acc [rest_{i} ...i] {some init} handlers)

  | (reactor-acc [{s-reactor-field loc label value} rest_{i} ...i] init [handler_{j} ...j]) =>
    (reactor-acc [rest_{i} ...i] init [(reactor-search @loc label value
                                         [{pair "last-image"       "Function"}
                                          {pair "on-tick"          "Function"}
                                          {pair "to-draw"          "Function"}
                                          {pair "on-key"           "Function"}
                                          {pair "on-mouse"         "Function"}
                                          {pair "stop-when"        "Function"}
                                          {pair "seconds-per-tick" "NumPositive"}
                                          {pair "title"            "String"}
                                          {pair "close-when-stop"  "Boolean"}])
                                       handler_{j} ...j])
end

sugar reactor-search:
  | (reactor-search label value [{pair label check} rest_{i} ...i]) =>
    (s-data-field label (check-ann value (a-name (s-type-global check))))
  | (reactor-search label value [whatever rest_{i} ...i]) =>
    (reactor-search label value [rest_{i} ...i])
  | (reactor-search label value []) => {WF-ERR-TODO}
end


################################################################################

sugar s-import-complete:
  | (s-import-complete vals types import-type vals-name types-name) =>
    <s-import-complete vals
                       types
                       import-type
                       (transform-underscore vals-name)
                       (transform-underscore types-name)>
  # TODO: need another phase before desugaring that goes through vals and types
  # and mark {s-underscore} as invalid
end

sugar s-lam:
  | (s-lam name [param_{x} ...x] args ann doc body check-loc check blocky) =>
    <s-lam name [(transform-underscore param_{x}) ...x] args ann doc body check-loc check blocky>
end

sugar s-bind:
  | (s-bind shadows name ann) => <s-bind shadows (transform-underscore name) ann>
end

################################################################################

sugar check-bool:
  | (check-bool e) => (s-prim-app "checkWrapBoolean" [e])
end

sugar s-op:
  | (s-op op-loc "opor" left right) =>
    (s-if-else [(s-if-branch left (s-bool true))] (check-bool right) false)
  | (s-op op-loc "opand" left right) =>
    (s-if-else [(s-if-branch left (check-bool right))] (s-bool false) false)
  | (s-op op-loc "op^" left right) => (s-app right [left])
  | (s-op op-loc op left right) => (curry-binop [left right] op)
end

sugar s-method-field:
  | (s-method-field name params args ann doc body check-loc check blocky) =>
    (s-data-field name (s-method name params args ann doc body
                                 check-loc check blocky))
end

sugar curry-acc:
  | (curry-acc [] [param_{x} ...x] args) =>
    {pair (biject reverse [(mk-s-bind param_{x}) ...x]) (biject reverse args)}
  | (curry-acc [<s-id <s-underscore>> rest_{x} ...x] [param_{y} ...y] [arg_{z} ...z]) =>
    (fresh [f] (curry-acc [rest_{x} ...x] [f param_{y} ...y] [(s-id f) arg_{z} ...z]))
  | (curry-acc [e rest_{x} ...x] [param_{y} ...y] [arg_{z} ...z]) =>
    (curry-acc [rest_{x} ...x] [param_{y} ...y] [e arg_{z} ...z])
end

sugar curry-args:
  | (curry-args lst) => (curry-acc lst [] [])
end

sugar curry-binop:
  | (curry-binop args op) => (curry-binop-help (curry-args args) op)
end

sugar curry-binop-help:
  | (curry-binop-help {pair [] args} "op+") => (s-app (s-id (s-global "_plus")) args)
  | (curry-binop-help {pair [] args} "op-") => (s-app (s-id (s-global "_minus")) args)
  | (curry-binop-help {pair [] args} "op*") => (s-app (s-id (s-global "_times")) args)
  | (curry-binop-help {pair [] args} "op/") => (s-app (s-id (s-global "_divide")) args)
  | (curry-binop-help {pair [] args} "op<") => (s-app (s-id (s-global "_lessthan")) args)
  | (curry-binop-help {pair [] args} "op>") => (s-app (s-id (s-global "_greaterthan")) args)
  | (curry-binop-help {pair [] args} "op>=") => (s-app (s-id (s-global "_greaterequal")) args)
  | (curry-binop-help {pair [] args} "op<=") => (s-app (s-id (s-global "_lessequal")) args)
  | (curry-binop-help {pair [] args} "op==") => (s-app (s-id (s-global "equal-always")) args)
  | (curry-binop-help {pair [] args} "op=~") => (s-app (s-id (s-global "equal-now")) args)
  | (curry-binop-help {pair [] args} "op<=>") => (s-app (s-id (s-global "identical")) args)
  | (curry-binop-help {pair [] args} "op<>") =>
    (s-prim-app "not" [(curry-binop-help {pair [] args} "op==")])
  | (curry-binop-help {pair params args} op) =>
    (mk-s-lam params (curry-binop-help {pair [] args} op))
end

sugar curry-help:
  | (curry-help {pair [] [f args_{x} ...x]}) => <s-app f [args_{x} ...x]>
  | (curry-help {pair params args}) => (mk-s-lam params (curry-help {pair [] args}))
end

sugar s-app:
  | (s-app f [args_{x} ...x]) => (curry-help (curry-args [f args_{x} ...x]))
end

sugar curry-method-help:
  | (curry-method-help {pair [] [obj args_{i} ...i]} l-dot field) =>
    <s-app <s-dot @l-dot obj field> [args_{i} ...i]>
  | (curry-method-help {pair params args} l-dot field) =>
    (mk-s-lam params (curry-method-help {pair [] args} l-dot field))
end

sugar s-method-app:
  | (s-method-app l-dot obj field [args_{i} ...i]) =>
    (curry-method-help (curry-args [obj args_{i} ...i]) l-dot field)
end

sugar s-dot:
  | (s-dot <s-id <s-underscore>> field) =>
    (fresh [x] (mk-s-lam [(mk-s-bind x)] <s-dot (s-id x) field>))
  | (s-dot x field) => <s-dot x field>
end

sugar s-get-bang:
  | (s-get-bang <s-id <s-underscore>> field) =>
    (fresh [x] (mk-s-lam [(mk-s-bind x)] <s-get-bang (s-id x) field>))
  | (s-get-bang x field) => <s-get-bang x field>
end

sugar s-update:
  | (s-update <s-id <s-underscore>> fields) =>
    (fresh [x] (mk-s-lam [(mk-s-bind x)] <s-update (s-id x) fields>))
  | (s-update x field) => <s-update x field>
end

sugar s-extend:
  | (s-extend <s-id <s-underscore>> fields) =>
    (fresh [x] (mk-s-lam [(mk-s-bind x)] <s-extend (s-id x) fields>))
  | (s-extend x field) => <s-extend x field>
end

################################################################################

sugar transform-underscore:
  | (transform-underscore <s-underscore>) => (fresh [name] name)
  | (transform-underscore non-underscore) => non-underscore
end
